#ifndef PRIVATE_LEVEL_1_H
#define PRIVATE_LEVEL_1_H

#include <Character.h>
#include <stdint.h>

#define row (9)
#define col (16)

typedef enum levelMode_e {
    DEFAULT,
    OPTIONS,
    PIECE_SELECT,
    MOVE,
    STATS,
    SETTINGS,
} levelMode_t;

typedef struct map_s {
    const char tiles[row][col] = 
    {
        {'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n'},
        {'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n'},
        {'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n'},
        {'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n'},
        {'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n'},
        {'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n'},
        {'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n'},
        {'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n'},
        {'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n'}
    }; 



    /* 
    ====Legend====
    p - peice
    r - river
    s - sea
    w - wall
    ==============
    */
    const char terrain[row][col] = 
    {
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', 'w', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', 'p', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '}
    };


    /* 
    ====Legend====
    p - peice
    r - river
    s - sea
    w - wall
    ==============
    */
    char collision[row][col] = 
    {
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', 'w', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', 'p', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '},
        {'s', 's', 's', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', ' ', ' ', ' '}
    };

    char pieceType[row][col] = 
    {
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}
    };

    char moveAttSpaces[row][col] = 
    {
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}
    };

    Character* pieceLocations [row][col] = {NULL};

    const char empty[row][col] = 
    {
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}
    };

    void fillMoveAttSpaces(int i_index, int j_index, int numMoves) {
        memcpy(&moveAttSpaces, &collision, sizeof(empty));
        moveAttSpaces[i_index][j_index] = '0';

        for (char move = '0'; move < '0' + numMoves; ++move) {

            for (int i = 0; i < row; ++i) {
                for (int j = 0; j < col; ++j) {
                    if (moveAttSpaces[i][j] == move) {
                        fillMoveArray(i, j, move + 1u);
                    }
                }
            }
        }

        for (int i = 0; i < row; ++i) {
            for (int j = 0; j < col; ++j) {
                if ('0' <= moveAttSpaces[i][j] && moveAttSpaces[i][j] < ('0' + numMoves + 1)) {
                    fillAttackArray(i, j, numMoves);
                }
            }
        }
    }

    private:
        void fillMoveArray(uint8_t i, uint8_t j, char numChar) {
            if (moveAttSpaces[i - 1u][j] == ' ') {       // [ ][x][ ]
                moveAttSpaces[i - 1u][j] = numChar;      // [ ][o][ ]
            }                                            // [ ][ ][ ]

            if (moveAttSpaces[i][j - 1u] == ' ') {       // [ ][ ][ ]
                moveAttSpaces[i][j - 1u] = numChar;      // [x][o][ ]
            }                                            // [ ][ ][ ]

            if (moveAttSpaces[i][j + 1u] == ' ') {       //[ ][ ][ ]
                moveAttSpaces[i][j + 1u] = numChar;      //[ ][o][x]
            }                                            //[ ][ ][ ]

            if (moveAttSpaces[i + 1u][j] == ' ') {       // [ ][ ][ ]
                moveAttSpaces[i + 1u][j] = numChar;      // [ ][o][ ]
            }                                            // [ ][x][ ]
        }

        void fillAttackArray(uint8_t i, uint8_t j, int numMoves) {
            if (!('0' <= moveAttSpaces[i - 1u][j] && moveAttSpaces[i - 1u][j] < ('0' + numMoves + 1))) { // [ ][x][ ]
                moveAttSpaces[i - 1u][j] = 'a';                                                          // [ ][o][ ]
            }                                                                                            // [ ][ ][ ]

            if (!('0' <= moveAttSpaces[i][j - 1u] && moveAttSpaces[i][j - 1u] < ('0' + numMoves + 1))) { // [ ][ ][ ]
                moveAttSpaces[i][j - 1u] = 'a';                                                          // [x][o][ ]
            }                                                                                            // [ ][ ][ ]

            if (!('0' <= moveAttSpaces[i][j + 1u] && moveAttSpaces[i][j + 1u] < ('0' + numMoves + 1))) { //[ ][ ][ ]
                moveAttSpaces[i][j + 1u] = 'a';                                                          //[ ][o][x]
            }                                                                                            //[ ][ ][ ]

            if (!('0' <= moveAttSpaces[i + 1u][j] && moveAttSpaces[i + 1u][j] < ('0' + numMoves + 1))) { // [ ][ ][ ]
                moveAttSpaces[i + 1u][j] = 'a';                                                          // [ ][o][ ]
            }                                                                                            // [ ][x][ ]
        }
} map_t;

#endif // PRIVATE_LEVEL_1_H
